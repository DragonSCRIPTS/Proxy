import random
import socket
import threading

class ProxyTester:
    def __init__(self, base_ip="104.18.37.248", count=10):
        self.base_ip = base_ip
        self.proxies = []
        self.successful_proxies = []
        self.count = count

    def generate_proxies(self):
        base_parts = self.base_ip.split('.')
        for _ in range(self.count):
            new_ip = f"{base_parts[0]}.{base_parts[1]}.{base_parts[2]}.{random.randint(1, 255)}"
            self.proxies.append(new_ip)

    def test_proxy(self, proxy):
        try:
            socket.setdefaulttimeout(5)
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.connect((proxy, 80))
            self.successful_proxies.append(proxy)
            print(f"Proxy funcionando: {proxy}")
            s.close()
        except:
            pass

    def test_proxies(self):
        threads = []
        for proxy in self.proxies:
            thread = threading.Thread(target=self.test_proxy, args=(proxy,))
            threads.append(thread)
            thread.start()
        for thread in threads:
            thread.join()

    def display_successful_proxies(self):
        if self.successful_proxies:
            print("\nProxies bem-sucedidos:")
            for proxy in self.successful_proxies:
                print(proxy)
        else:
            print("Nenhum proxy bem-sucedido.")

def main():
    count = int(input("Quantos proxies gerar? "))
    tester = ProxyTester(count=count)
    
    # Gerar proxies
    tester.generate_proxies()
    
    # Testar proxies
    tester.test_proxies()

    # Exibir proxies bem-sucedidos
    tester.display_successful_proxies()

if __name__ == "__main__":
    main()
